package employeeManager;

public class Company {

	private String name;
	private Employee[] employees;
	private int companyType;
	private int maxEmployees;
	final private static int PAID = 0;
	final private static int FREE = 1;

	public Company(String name) {
		this.name = name;
		employees = new Employee[0];
		companyType = PAID;
	}

	public Company(String name, int maxEmployees) {
		this.name = name;
		this.maxEmployees = maxEmployees;
		employees = new Employee[maxEmployees];
		companyType = FREE;
	}

	public String getCompanyName() {
		return name;
	}

	public boolean hireCommissionedEmployee(String firstName, String lastName, double commissionRate) {
		if (firstName == null || lastName == null || commissionRate < 0.0 || commissionRate >= 100.0
				|| firstName.equals("") || lastName.equals("")) {
			return false;
		}
		if (companyType == PAID) {
			Employee newEmployee = new Commissioned(firstName, lastName, commissionRate);
			for (int j = 0; j < employees.length; j++) {
				if (employees[j].equals(newEmployee)){
					System.out.println("Hi");
					return false;
				}
			}

			Employee[] tempArr = new Employee[employees.length + 1];
			for (int i = 0; i < employees.length; i++) {
				tempArr[i] = employees[i];
			}
			tempArr[tempArr.length - 1] = newEmployee;
			employees = tempArr;
			return true;
		} else {
			Employee newEmployee = new Commissioned(firstName, lastName, commissionRate);
			for (int i = 0; i < employees.length; i++) {
				if (employees[i] == null) {
					employees[i] = newEmployee;
					return true;
				}
			}
		}
		return false;

	}

	public boolean hireSalariedEmployee(String firstName, String lastName, double yearlySalary) {
		if (firstName == null || lastName == null || yearlySalary < 0.0 || firstName.equals("")
				|| lastName.equals("")) {
			return false;
		}

		Employee newEmployee = new Salaried(firstName, lastName, yearlySalary);
		if (companyType == PAID) {
			for (int j = 0; j < employees.length; j++) {
				if (employees[j].equals(newEmployee)) {
					System.out.println("Hi");
					return false;
				}
			}

			Employee[] tempArr = new Employee[employees.length + 1];
			for (int i = 0; i < employees.length; i++) {
				tempArr[i] = employees[i];
			}
			tempArr[tempArr.length - 1] = newEmployee;
			employees = tempArr;
			return true;
		} else {
			
			for (int i = 0; i < employees.length; i++) {
				if (employees[i] == null) {
					employees[i] = newEmployee;
					return true;
				}
			}

		}
		return false;

	}

	public int numEmployees() {
		if (companyType == FREE) {
			for (int i = 0; i < employees.length; i++) {
				if (employees[i] == null) {
					return i;
				}
			}
		}
		return employees.length;

	}

	public int employeeCapacity() {
		if (companyType == FREE) {
			return maxEmployees;
		} else {
			return Integer.MAX_VALUE;
		}
	}

	public String[] getEmployeeNames() {
		String[] names = new String[numEmployees()];
		 for(int i = 0; i < numEmployees(); i++) {
			 names[i] = employees[i].getFullName();
		 }
		 String temp;
		 for (int i = 0; i < names.length; i++) 
	        {
	            for (int j = i + 1; j < names.length; j++) 
	            {
	                if (names[i].compareTo(names[j])>0) 
	                {
	                    temp = names[i];
	                    names[i] = names[j];
	                    names[j] = temp;
	                }
	            }
	        }
		 return names;
	}

	public boolean workHours(String firstName, String lastName, int numHours) {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public int numHours(String firstName, String lastName) {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public boolean makeSale(String firstName, String lastName, double saleAmt) {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public double amtSalesMade(String firstName, String lastName) {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public double getPaycheckAmount(String firstName, String lastName) {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public double getPayroll() {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public void newPayPeriod() {
		throw new UnsupportedOperationException("You must write this method.");
	}

	public double billAmount() {
		throw new UnsupportedOperationException("You must write this method.");
	}

}
